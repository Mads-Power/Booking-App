// <auto-generated />
using System;
using Booking.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booking.Migrations
{
    [DbContext(typeof(OfficeDbContext))]
    [Migration("20221118085135_IterationTwoCreate")]
    partial class IterationTwoCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booking.Models.Domain.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Office");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 20,
                            Name = "Lille Grensen"
                        });
                });

            modelBuilder.Entity("Booking.Models.Domain.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 10,
                            Name = "Storerommet",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 5,
                            Name = "Lillerommet",
                            OfficeId = 1
                        });
                });

            modelBuilder.Entity("Booking.Models.Domain.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Seat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsOccupied = false,
                            Name = "01",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsOccupied = false,
                            Name = "02",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsOccupied = true,
                            Name = "03",
                            RoomId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            IsOccupied = true,
                            Name = "04",
                            RoomId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            IsOccupied = false,
                            Name = "05",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 6,
                            IsOccupied = false,
                            Name = "06",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 7,
                            IsOccupied = false,
                            Name = "07",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 8,
                            IsOccupied = false,
                            Name = "01",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 9,
                            IsOccupied = false,
                            Name = "01",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 10,
                            IsOccupied = false,
                            Name = "10",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 11,
                            IsOccupied = false,
                            Name = "11",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 12,
                            IsOccupied = false,
                            Name = "12",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 13,
                            IsOccupied = false,
                            Name = "13",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 14,
                            IsOccupied = false,
                            Name = "14",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 15,
                            IsOccupied = false,
                            Name = "15",
                            RoomId = 2
                        });
                });

            modelBuilder.Entity("Booking.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSignedIn")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSignedIn = false,
                            Name = "Ted Mosby",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsSignedIn = true,
                            Name = "Marshall Eriksen",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsSignedIn = true,
                            Name = "Lily Aldrin",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsSignedIn = false,
                            Name = "Barney Stinson",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 5,
                            IsSignedIn = false,
                            Name = "Robin Scherbatsky",
                            OfficeId = 1
                        });
                });

            modelBuilder.Entity("Booking.Models.Domain.Room", b =>
                {
                    b.HasOne("Booking.Models.Domain.Office", "Office")
                        .WithMany("Rooms")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Booking.Models.Domain.Seat", b =>
                {
                    b.HasOne("Booking.Models.Domain.Room", "Room")
                        .WithMany("Seats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Models.Domain.User", "User")
                        .WithOne("Seat")
                        .HasForeignKey("Booking.Models.Domain.Seat", "UserId");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Booking.Models.Domain.User", b =>
                {
                    b.HasOne("Booking.Models.Domain.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Booking.Models.Domain.Office", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Booking.Models.Domain.Room", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Booking.Models.Domain.User", b =>
                {
                    b.Navigation("Seat");
                });
#pragma warning restore 612, 618
        }
    }
}
