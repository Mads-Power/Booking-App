<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Booking</name>
    </assembly>
    <members>
        <member name="M:BookingApp.Controllers.BookingController.GetAllBookings">
            <summary>
                Fetch all bookings from the database.
            </summary>
            <returns>A list of booking read DTOs.</returns>
        </member>
        <member name="M:BookingApp.Controllers.BookingController.GetBooking(System.Int32)">
            <summary>
                Fetch a booking from the database based on booking id.
            </summary>
            <param name="bookingId">The id of the booking.</param>
            <returns>
                A read DTO of the booking if it is found in the database.
                NotFound if it is not found.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.BookingController.PostBooking(BookingApp.Models.DTOs.BookingCreateDTO)">
            <summary>
                Post a new booking to the database.
            </summary>
            <param name="dtoBooking">The create DTO for the booking.</param>
            <returns>
                A read DTO of the booking which was created.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.BookingController.PutBooking(System.Int32,BookingApp.Models.DTOs.BookingEditDTO)">
            <summary>
                Edit an existing booking in the database.
            </summary>
            <param name="bookingId">The id of the booking.</param>
            <param name="bookingDto">The edit DTO for the booking.</param>
            <returns>
                BadRequest if body is invalid.
                NotFound if id is invalid.
                NoContent if booking was successfully updated. 
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.BookingController.DeleteBooking(System.Int32)">
            <summary>
                Delete a booking from the database.
            </summary>
            <param name="bookingId">Id of the booking.</param>
            <returns>
                NotFound if id does not match anything in db.
                NoContent if delete was successful.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.OfficeController.GetAllOffices">
            <summary>
                Fetch all offices from the database.
            </summary>
            <returns>A list of office read DTOs.</returns>
        </member>
        <member name="M:BookingApp.Controllers.OfficeController.GetOffice(System.Int32)">
            <summary>
                Fetch an office from the database based on id.
            </summary>
            <param name="officeId">The id of the office.</param>
            <returns>
                A read DTO of the office if it is found in the database.
                NotFound if it is not found.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.OfficeController.PostOffice(BookingApp.Models.DTOs.OfficeCreateDTO)">
            <summary>
                Post a new office to the database.
            </summary>
            <param name="dtoOffice">The create DTO for the office.</param>
            <returns>
                A read DTO of the office which was created.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.OfficeController.PutOffice(System.Int32,BookingApp.Models.DTOs.OfficeEditDTO)">
            <summary>
                Edit an existing office in the database.
            </summary>
            <param name="officeId">The id of the office.</param>
            <param name="officeDto">The edit DTO for the office.</param>
            <returns>
                BadRequest if body is invalid.
                NotFound if id is invalid.
                NoContent if office was successfully updated. 
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.OfficeController.DeleteOffice(System.Int32)">
            <summary>
                Delete an office from the database.
            </summary>
            <param name="officeId">Id of the office.</param>
            <returns>
                NotFound if id does not match anything in db.
                NoContent if delete was successful.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.GetAllRooms">
            <summary>
                Fetch all rooms from the database.
            </summary>
            <returns>A list of room read DTOs.</returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.GetRoom(System.Int32)">
            <summary>
                Fetch a room from the database based on room id.
            </summary>
            <param name="roomId">The id of the room.</param>
            <returns>
                A read DTO of the room if it is found in the database.
                NotFound if it is not found.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.PostRoom(BookingApp.Models.DTOs.RoomCreateDTO)">
            <summary>
                Post a new room to the database.
            </summary>
            <param name="dtoRoom">The create DTO for the room.</param>
            <returns>
                A read DTO of the room which was created.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.PutRoom(System.Int32,BookingApp.Models.DTOs.RoomEditDTO)">
            <summary>
                Edit an existing room in the database.
            </summary>
            <param name="roomId">The id of the room.</param>
            <param name="roomDto">The edit DTO for the room.</param>
            <returns>
                BadRequest if body is invalid.
                NotFound if id is invalid.
                NoContent if room was successfully updated. 
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.DeleteRoom(System.Int32)">
            <summary>
                Delete a room from the database.
            </summary>
            <param name="roomId">Id of the room.</param>
            <returns>
                NotFound if id does not match anything in db.
                NoContent if delete was successful.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.GetSeatsInRoom(System.Int32)">
            <summary>
                Get all seats in a room.
            </summary>
            <param name="roomId">Id of the room.</param>
            <returns>
                A list of seat read DTOs.
                NotFound if room id is invalid.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.RoomController.GetUsersInRoom(System.Int32)">
            <summary>
                Get all users with seats booked in the room.
            </summary>
            <param name="roomId">If of the room.</param>
            <returns>
                List of user read DTOs.
                NotFound if room id is invalid.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.SeatController.GetAllSeats">
            <summary>
                Fetch all seats from the database.
            </summary>
            <returns>A list of seat read DTOs.</returns>
        </member>
        <member name="M:BookingApp.Controllers.SeatController.GetSeat(System.Int32)">
            <summary>
                Fetch a seat from the database based on seat id.
            </summary>
            <param name="seatId">The id of the seat.</param>
            <returns>
                A read DTO of the seat if it is found in the database.
                NotFound if it is not found.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.SeatController.PostSeat(BookingApp.Models.DTOs.SeatCreateDTO)">
            <summary>
                Post a new seat to the database.
            </summary>
            <param name="dtoSeat">The create DTO for the seat.</param>
            <returns>
                A read DTO of the seat which was created.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.SeatController.PutSeat(System.Int32,BookingApp.Models.DTOs.SeatEditDTO)">
            <summary>
                Edit an existing seat in the database.
            </summary>
            <param name="seatId">The id of the seat.</param>
            <param name="seatDto">The edit DTO for the seat.</param>
            <returns>
                BadRequest if body is invalid.
                NotFound if id is invalid.
                NoContent if seat was successfully updated. 
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.SeatController.DeleteSeat(System.Int32)">
            <summary>
                Delete a seat from the database.
            </summary>
            <param name="seatId">Id of the seat.</param>
            <returns>
                NotFound if id does not match anything in db.
                NoContent if delete was successful.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.GetAllUsers">
            <summary>
            Fetch all users from the database.
            </summary>
            <returns>A list of User read DTOs </returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.GetUser(System.Int32)">
            <summary>
            Fetch a specific user from the database.
            </summary>
            <param name="userId">The id of the user.</param>
            <returns>A user read DTO.</returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.PostUser(BookingApp.Models.DTOs.UserCreateDTO)">
            <summary>
                Post a new user to the database.
            </summary>
            <param name="dtoUser">The create DTO for the user.</param>
            <returns>
                A read DTO of the user that was created.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.PutUser(System.Int32,BookingApp.Models.DTOs.UserEditDTO)">
            <summary>
                Edit an existing user in the database.
            </summary>
            <param name="userId">The id of the user.</param>
            <param name="userDto">The edit DTO for the user.</param>
            <returns>
                BadRequest if body is invalid.
                NotFound if id is invalid.
                NoContent if user was successfully updated. 
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.DeleteUser(System.Int32)">
            <summary>
                Delete a user from the database.
            </summary>
            <param name="userId">Id of the user.</param>
            <returns>
                NotFound if id does not match anything in db.
                NoContent if delete was successful.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.UserBookSeat(System.Int32,System.Int32,System.String)">
            <summary>
                Book a seat for the user.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="seatId">Id of the seat.</param>
            <param name="date">Date of the booking.</param>
            <returns>
                NotFound if the ids don't match.
                NoContent if seat was successfully booked.
            </returns>
        </member>
        <member name="M:BookingApp.Controllers.UserController.UserUnbookSeat(System.Int32,System.String)">
            <summary>
                Unbook a seat for the user.
            </summary>
            <param name="userId">Id of the user.</param>
            <param name="date">Date of the booking.</param>
            <returns>
                NotFound if the ids don't match.
                NoContent if seat was successfully unbooked.
            </returns>
        </member>
        <member name="T:BookingApp.Helpers.ValidationResult">
            <summary> Simple validator with results and reasoning. </summary>
        </member>
        <member name="P:BookingApp.Helpers.ValidationResult.Result">
            <summary> Whether validation succeeded. </summary>
        </member>
        <member name="P:BookingApp.Helpers.ValidationResult.RejectionReason">
            <summary> Reason for why validation failed. </summary>
        </member>
        <member name="T:BookingApp.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:BookingApp.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BookingApp.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:BookingApp.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
